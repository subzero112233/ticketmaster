// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ErrorOutput defines model for ErrorOutput.
type ErrorOutput struct {
	Message string `json:"message"`
}

// Event defines model for Event.
type Event struct {
	Date        time.Time `json:"date"`
	Description string    `json:"description"`
	Id          string    `json:"id"`
	Location    string    `json:"location"`
	Name        string    `json:"name"`
	Performer   string    `json:"performer"`
	Venue       string    `json:"venue"`
}

// Reservation defines model for Reservation.
type Reservation struct {
	Date        *time.Time `json:"date,omitempty"`
	EventId     string     `json:"event_id"`
	Id          *string    `json:"id,omitempty"`
	Tickets     []string   `json:"tickets"`
	TotalAmount *float32   `json:"total_amount,omitempty"`
}

// Ticket defines model for Ticket.
type Ticket struct {
	EventId string  `json:"event_id"`
	Id      string  `json:"id"`
	Price   float32 `json:"price"`
}

// User defines model for User.
type User struct {
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// SearchEventsParams defines parameters for SearchEvents.
type SearchEventsParams struct {
	Performer   *string    `form:"performer,omitempty" json:"performer,omitempty"`
	Location    *string    `form:"location,omitempty" json:"location,omitempty"`
	Description *string    `form:"description,omitempty" json:"description,omitempty"`
	FromDate    *time.Time `form:"from_date,omitempty" json:"from_date,omitempty"`
	ToDate      *time.Time `form:"to_date,omitempty" json:"to_date,omitempty"`
	Page        *int       `form:"page,omitempty" json:"page,omitempty"`
}

// PlaceReservationJSONRequestBody defines body for PlaceReservation for application/json ContentType.
type PlaceReservationJSONRequestBody = Reservation

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all events
	// (GET /events)
	GetAllEvents(w http.ResponseWriter, r *http.Request)
	// search events
	// (GET /events/search)
	SearchEvents(w http.ResponseWriter, r *http.Request, params SearchEventsParams)
	// get event by id
	// (GET /events/{event_id})
	GetEvent(w http.ResponseWriter, r *http.Request, eventId string)
	// get available tickets for event by id
	// (GET /events/{event_id}/tickets)
	GetAvailableTicketsForEvent(w http.ResponseWriter, r *http.Request, eventId string)
	// place reservation
	// (POST /reservations)
	PlaceReservation(w http.ResponseWriter, r *http.Request)
	// create a user
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// get all events
// (GET /events)
func (_ Unimplemented) GetAllEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// search events
// (GET /events/search)
func (_ Unimplemented) SearchEvents(w http.ResponseWriter, r *http.Request, params SearchEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get event by id
// (GET /events/{event_id})
func (_ Unimplemented) GetEvent(w http.ResponseWriter, r *http.Request, eventId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// get available tickets for event by id
// (GET /events/{event_id}/tickets)
func (_ Unimplemented) GetAvailableTicketsForEvent(w http.ResponseWriter, r *http.Request, eventId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// place reservation
// (POST /reservations)
func (_ Unimplemented) PlaceReservation(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// create a user
// (POST /users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllEvents operation middleware
func (siw *ServerInterfaceWrapper) GetAllEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllEvents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SearchEvents operation middleware
func (siw *ServerInterfaceWrapper) SearchEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchEventsParams

	// ------------- Optional query parameter "performer" -------------

	err = runtime.BindQueryParameter("form", true, false, "performer", r.URL.Query(), &params.Performer)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "performer", Err: err})
		return
	}

	// ------------- Optional query parameter "location" -------------

	err = runtime.BindQueryParameter("form", true, false, "location", r.URL.Query(), &params.Location)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "location", Err: err})
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", r.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "description", Err: err})
		return
	}

	// ------------- Optional query parameter "from_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "from_date", r.URL.Query(), &params.FromDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from_date", Err: err})
		return
	}

	// ------------- Optional query parameter "to_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "to_date", r.URL.Query(), &params.ToDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to_date", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchEvents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEvent operation middleware
func (siw *ServerInterfaceWrapper) GetEvent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event_id", runtime.ParamLocationPath, chi.URLParam(r, "event_id"), &eventId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "event_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEvent(w, r, eventId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAvailableTicketsForEvent operation middleware
func (siw *ServerInterfaceWrapper) GetAvailableTicketsForEvent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event_id", runtime.ParamLocationPath, chi.URLParam(r, "event_id"), &eventId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "event_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAvailableTicketsForEvent(w, r, eventId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PlaceReservation operation middleware
func (siw *ServerInterfaceWrapper) PlaceReservation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PlaceReservation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/events", wrapper.GetAllEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/events/search", wrapper.SearchEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/events/{event_id}", wrapper.GetEvent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/events/{event_id}/tickets", wrapper.GetAvailableTicketsForEvent)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/reservations", wrapper.PlaceReservation)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.CreateUser)
	})

	return r
}

type GetAllEventsRequestObject struct {
}

type GetAllEventsResponseObject interface {
	VisitGetAllEventsResponse(w http.ResponseWriter) error
}

type GetAllEvents200JSONResponse []Event

func (response GetAllEvents200JSONResponse) VisitGetAllEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllEventsdefaultJSONResponse struct {
	Body       ErrorOutput
	StatusCode int
}

func (response GetAllEventsdefaultJSONResponse) VisitGetAllEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchEventsRequestObject struct {
	Params SearchEventsParams
}

type SearchEventsResponseObject interface {
	VisitSearchEventsResponse(w http.ResponseWriter) error
}

type SearchEvents200JSONResponse []Event

func (response SearchEvents200JSONResponse) VisitSearchEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchEventsdefaultJSONResponse struct {
	Body       ErrorOutput
	StatusCode int
}

func (response SearchEventsdefaultJSONResponse) VisitSearchEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetEventRequestObject struct {
	EventId string `json:"event_id"`
}

type GetEventResponseObject interface {
	VisitGetEventResponse(w http.ResponseWriter) error
}

type GetEvent200JSONResponse Event

func (response GetEvent200JSONResponse) VisitGetEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventdefaultJSONResponse struct {
	Body       ErrorOutput
	StatusCode int
}

func (response GetEventdefaultJSONResponse) VisitGetEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAvailableTicketsForEventRequestObject struct {
	EventId string `json:"event_id"`
}

type GetAvailableTicketsForEventResponseObject interface {
	VisitGetAvailableTicketsForEventResponse(w http.ResponseWriter) error
}

type GetAvailableTicketsForEvent200JSONResponse []Ticket

func (response GetAvailableTicketsForEvent200JSONResponse) VisitGetAvailableTicketsForEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAvailableTicketsForEventdefaultJSONResponse struct {
	Body       ErrorOutput
	StatusCode int
}

func (response GetAvailableTicketsForEventdefaultJSONResponse) VisitGetAvailableTicketsForEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PlaceReservationRequestObject struct {
	Body *PlaceReservationJSONRequestBody
}

type PlaceReservationResponseObject interface {
	VisitPlaceReservationResponse(w http.ResponseWriter) error
}

type PlaceReservation201JSONResponse Reservation

func (response PlaceReservation201JSONResponse) VisitPlaceReservationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PlaceReservationdefaultJSONResponse struct {
	Body       ErrorOutput
	StatusCode int
}

func (response PlaceReservationdefaultJSONResponse) VisitPlaceReservationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201Response struct {
}

func (response CreateUser201Response) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateUserdefaultJSONResponse struct {
	Body       ErrorOutput
	StatusCode int
}

func (response CreateUserdefaultJSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// get all events
	// (GET /events)
	GetAllEvents(ctx context.Context, request GetAllEventsRequestObject) (GetAllEventsResponseObject, error)
	// search events
	// (GET /events/search)
	SearchEvents(ctx context.Context, request SearchEventsRequestObject) (SearchEventsResponseObject, error)
	// get event by id
	// (GET /events/{event_id})
	GetEvent(ctx context.Context, request GetEventRequestObject) (GetEventResponseObject, error)
	// get available tickets for event by id
	// (GET /events/{event_id}/tickets)
	GetAvailableTicketsForEvent(ctx context.Context, request GetAvailableTicketsForEventRequestObject) (GetAvailableTicketsForEventResponseObject, error)
	// place reservation
	// (POST /reservations)
	PlaceReservation(ctx context.Context, request PlaceReservationRequestObject) (PlaceReservationResponseObject, error)
	// create a user
	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllEvents operation middleware
func (sh *strictHandler) GetAllEvents(w http.ResponseWriter, r *http.Request) {
	var request GetAllEventsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllEvents(ctx, request.(GetAllEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllEventsResponseObject); ok {
		if err := validResponse.VisitGetAllEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchEvents operation middleware
func (sh *strictHandler) SearchEvents(w http.ResponseWriter, r *http.Request, params SearchEventsParams) {
	var request SearchEventsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchEvents(ctx, request.(SearchEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchEventsResponseObject); ok {
		if err := validResponse.VisitSearchEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEvent operation middleware
func (sh *strictHandler) GetEvent(w http.ResponseWriter, r *http.Request, eventId string) {
	var request GetEventRequestObject

	request.EventId = eventId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEvent(ctx, request.(GetEventRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEvent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventResponseObject); ok {
		if err := validResponse.VisitGetEventResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAvailableTicketsForEvent operation middleware
func (sh *strictHandler) GetAvailableTicketsForEvent(w http.ResponseWriter, r *http.Request, eventId string) {
	var request GetAvailableTicketsForEventRequestObject

	request.EventId = eventId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAvailableTicketsForEvent(ctx, request.(GetAvailableTicketsForEventRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAvailableTicketsForEvent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAvailableTicketsForEventResponseObject); ok {
		if err := validResponse.VisitGetAvailableTicketsForEventResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PlaceReservation operation middleware
func (sh *strictHandler) PlaceReservation(w http.ResponseWriter, r *http.Request) {
	var request PlaceReservationRequestObject

	var body PlaceReservationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PlaceReservation(ctx, request.(PlaceReservationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PlaceReservation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PlaceReservationResponseObject); ok {
		if err := validResponse.VisitPlaceReservationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/jNhD9KwLbQwu4trO96dQPpEVPW2za0+4imFAjm1tSZIYjA0ag/16QlGwmkhzv",
	"ZgMURm8UhzMcvvdmSD0IaY2zDTbsRfkgvNyigTi8JrL0tmXXcvh0ZB0SK4xGg97DBsOQ9w5FKTyTajai",
	"6xaC8L5VhJUo3x8WflwMC+3dJ5QsuoW43mEzEbsCjoFrSwZYlHHiB1YGxeLpbgtRoZekHCvbTGSzEKqa",
	"nNZWwqxPAwYnDQ4pZIU0ad1h054BiapEv0UecJHOPUTJMnx8xikg36FH2h3O8xI4MXByOwPazDQr+Q8m",
	"/ShG46cXpQkggn38tgz6FoxtkwZ6e9OaO6QRZsMWWYJTQPwVl40x+JJTOVISn88ssnmIP7hNJfe3T7p5",
	"kpoBpScTqBV5vp3VooZ565Mc0x6PIub+42RDANXUNoSWtmGQnOUqCP0Wa78F2il+c/XTJswvpTWDsMsg",
	"yS3WxU1aMypUceNQqloliRe1pcJbg0XQsZK4/BBkz4p1iJXIN+A51skOyacg6+V6eRViW4cNOCVK8eNy",
	"vVwHGoC3Ed9V5CYON0kaAf247R+VKMXvyD9rfZ0WBdi8s41P3LxZrwcE+k4Fzuk+6dUnn8ot9cxH6v+W",
	"sBal+GZ17K6rvrWuUtcbVUQ3gugd3rfouXBkJXqPVeFbGUZ1q/X+Q5NAraHV/FlZnkwua/oTKb0doCtq",
	"UBqrwFNY5VtjgPaiDBgXoHXRo/6MrSdn5RFIbmc5uonmA0cOCAwykhfl+wehQmb3LdL+KL+8rx5PPqqS",
	"aees8362b47XF7jXZM1tfxEcnc9p3XMR2X7deC7c5nmwgwSvFsKoRpnWxHEfTzWMm9g3P/5fXS+trlQn",
	"k8U1Mg219TBcTt2pHphwm66t0EuPAsjuuuMdw9TiKbm/lPszKL+gBhohLu72harEc8YxzavsPTZ75e1A",
	"abjTmF5M/jdL/3EFnFX9/fvvoi/Xgbmipzk+nk4qZuzCdiQjOv5DRJid9RPS+VODxPx3I0kAPf9iq/1X",
	"QyrfoXv8mg0660Zaunq9rS9ANy6wVlB+stycDFhAr4/v/PdBIdAkkUR5tD42hDld/EoIjPEP53UUEUOf",
	"L4ULIE1GSAso2nj0E6au+zcAAP//GZGQNccRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
