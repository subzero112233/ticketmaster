package handler

import (
	"github.com/subzero112233/ticketmaster/api"
	"github.com/subzero112233/ticketmaster/domain/entity"
	"github.com/subzero112233/ticketmaster/usecase/events"
	"time"

	"github.com/aws/aws-sdk-go/aws"
)

func toFilter(filter api.SearchEventsRequestObject) *events.Filter {
	// if from_date not specified - set it to 7 days ago
	if filter.Params.FromDate == nil {
		filter.Params.FromDate = aws.Time(time.Now().AddDate(0, 0, -7))
	}

	// if to_date not specified - set it to now
	if filter.Params.ToDate == nil {
		filter.Params.ToDate = aws.Time(time.Now())
	}

	return &events.Filter{
		Performer:   filter.Params.Performer,
		Location:    filter.Params.Location,
		Description: filter.Params.Description,
		FromDate:    aws.TimeValue(filter.Params.FromDate),
		ToDate:      aws.TimeValue(filter.Params.ToDate),
		Page:        aws.IntValue(filter.Params.Page),
	}
}

func toReservation(reservation api.PlaceReservationRequestObject, userID string) entity.Reservation {
	// ID and TotalAmount are generated by the repository (database)
	return entity.Reservation{
		UserID:    userID,
		EventID:   reservation.Body.EventId,
		TicketIDs: reservation.Body.Tickets,
	}
}

func toReservationResponse(reservation entity.Reservation) api.PlaceReservation201JSONResponse {
	return api.PlaceReservation201JSONResponse{
		Id:          reservation.ID,
		EventId:     reservation.EventID,
		Tickets:     reservation.TicketIDs,
		TotalAmount: &reservation.TotalAmount,
		Date:        reservation.Date,
	}
}

func toEventsResponse(events []entity.Event) []api.Event {
	output := make([]api.Event, 0, len(events))
	for _, event := range events {
		output = append(output, toEventResponse(event))
	}

	return output
}
func toEventResponse(event entity.Event) api.Event {
	return api.Event{
		Id:          event.ID,
		Performer:   event.Performer,
		Date:        event.Date,
		Location:    event.Location,
		Venue:       event.Venue,
		Name:        event.Name,
		Description: event.Description,
	}
}

func toTicketsResponse(tickets []entity.Ticket) []api.Ticket {
	output := make([]api.Ticket, 0, len(tickets))
	for _, ticket := range tickets {
		output = append(output, api.Ticket{
			Id:      ticket.ID,
			EventId: ticket.EventID,
			Price:   ticket.Price,
		})
	}

	return output
}

func toEntityUser(user api.CreateUserJSONRequestBody) entity.User {
	return entity.User{
		Email:     user.Email,
		FirstName: user.FirstName,
		LastName:  user.LastName,
	}
}
